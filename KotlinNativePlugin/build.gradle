buildscript {
    repositories {
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url  "http://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
}

group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.kotlin.multiplatform'

kotlin {
    targets {
        fromPreset(presets.jvm, 'android')
    }

    js()

    def os = org.gradle.internal.os.OperatingSystem.current()
    if(os.isWindows()) {
        mingwX64("native") {
            binaries {
                sharedLib {
                    baseName = "libnative"
                }
            }
        }
    } else if(os.isMacOsX()) {
        macosX64("native") {
            binaries {
                sharedLib {
                    baseName = "native"
                }
            }
        }
        if (project.findProperty("device")?.toBoolean() ?: false) {
            iosArm64('ios') {
                binaries {
                    framework()
                }
            }
        } else {
            iosX64('ios') {
                binaries {
                    framework()
                }
            }
        }
    } else if(os.isLinux()) {
        linuxX64("native") {
            binaries {
                sharedLib {
                    baseName = "native"
                }
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinx_coroutines_version"
                implementation "io.ktor:ktor-client-core:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
        androidMain {
            dependsOn(commonMain)
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
                implementation "io.ktor:ktor-client-android:$ktor_version"
            }
        }
        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        iosMain {
            dependsOn(commonMain)
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"

            }
        }
        iosTest {
            dependencies {
//                implementation kotlin('test-ios')
            }
        }
        jsMain {
            dependsOn(commonMain)
            dependencies {
                implementation kotlin('stdlib-js')
//                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-js:$kotlinx_coroutines_version"
                implementation "io.ktor:ktor-client-js:$ktor_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        nativeMain {
            dependsOn(commonMain)
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"
                implementation "io.ktor:ktor-client-curl:$ktor_version"
            }
        }
        nativeTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
    }

    experimental {
        coroutines "enable"
    }
}

configurations {
    compileClasspath
}

task jsWeb(dependsOn: [jsJar]) {
    doLast {
        copy {
            def jsCompilations = kotlin.targets.js.compilations
            //from jsCompilations.main.output
            from jsCompilations.main.output
            from kotlin.sourceSets.jsMain.resources.srcDirs
            //dump(kotlin.sourceSets.jsMain)
            //dump(jsCompilations.main)
            jsCompilations.main.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into "$buildDir/web"
        }
    }
}

tasks.build.dependsOn jsWeb
tasks.assemble.dependsOn jsWeb
